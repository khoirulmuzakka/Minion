#ifndef GWO_DE_H
#define GWO_DE_H

#include <vector>
#include <random>
#include <algorithm>
#include <functional>
#include <limits>
#include <numeric>
#include "utility.h"
#include "minimizer_base.h"

namespace minion {
/**
 * @class GWO_DE
 * @brief Combined Grey Wolf Optimizer with Differential Evolution algorithm.
 */
class GWO_DE : public MinimizerBase {
public:

   /**
     * @brief Constructor for Differential_Evolution.
     * @param func The objective function to minimize.
     * @param bounds The bounds for the variables.
     * @param x0 The initial guesses for the solution. Note that Minion assumes multiple initial guesses, thus, x0 is an std::vector<std::vector<double>> object. These guesses will be used for population initialization.
     * @param data Additional data for the objective function.
     * @param callback Callback function for intermediate results.
     * @param tol The tolerance for stopping criteria.
     * @param maxevals The maximum number of evaluations.
     * @param seed The seed for random number generation.
     * @param options Option map that specifies further configurational settings for the algorithm.
     */
    GWO_DE(
        MinionFunction func, 
            const std::vector<std::pair<double, double>>& bounds, 
            const std::vector<std::vector<double>>& x0 = {},
            void* data = nullptr, 
            std::function<void(MinionResult*)> callback = nullptr,
            double tol = 0.0001, 
            size_t maxevals = 100000, 
            int seed=-1, 
            std::map<std::string, ConfigValue> options = std::map<std::string, ConfigValue>()
        ) :  
        MinimizerBase(func, bounds, x0, data, callback, tol, maxevals, seed, options){};

    /**
     * @brief Performs the optimization process.
     * @return MinionResult containing the best found solution and associated information.
     */
    virtual MinionResult optimize() override;

public:
    double CR, F, elimination_prob=0.1;
    size_t dimension;
    double alpha_score;
    double beta_score;
    double delta_score;
    size_t eval_count;
    std::vector<double> alpha_pos;
    std::vector<double> beta_pos;
    std::vector<double> delta_pos;
    std::vector<std::vector<double>> population;
    std::vector<double> fitness;

    /**
     * @brief Initializes the population randomly within the given bounds.
     */
    void initialize_population();

    /**
     * @brief Evaluates the fitness of the entire population.
     */
    void evaluate_population();

    /**
     * @brief Updates the alpha, beta, and delta wolves based on the current population fitness.
     */
    void update_leaders();

    /**
     * @brief Updates the position of a given solution based on the GWO strategy.
     * @param X Current position of the solution.
     * @param A Attraction coefficient vector.
     * @param C Distance control coefficient vector.
     * @return New position of the solution.
     */
    std::vector<double> update_position(const std::vector<double>& X, const std::vector<double>& A1, const std::vector<double>& C1,
                                        const std::vector<double>& A2, const std::vector<double>& C2,
                                        const std::vector<double>& A3, const std::vector<double>& C3) const;

    /**
     * @brief Performs the Differential Evolution process to generate new solutions.
     * @return New population generated by Differential Evolution.
     */
    std::vector<std::vector<double>> differential_evolution() const;

    /**
     * @brief Performs the elimination process to introduce diversity into the population.
     */
    void eliminate();

    std::vector<std::vector<double>> generate_gwo_candidates(double a) const;

    /**
     * @brief Initialize the algorithm given the input settings.
     */
    void initialize  () override;
};

}

#endif // GWO_DE_H
